plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

version = "${minecraftVersion}-${modVersion}-fabric"

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
    implementation project(":Common")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"
    /*
    // Make a collection of all api modules we wish to use
    Set<String> apiModules = [
            "fabric-api-base",
            "fabric-data-generation-api-v1"
    ]
    // Add each module as a dependency
    apiModules.forEach {
        include(modImplementation(fabricApi.module(it, fabricVersion)))
    }
     */

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation "me.zeroeightsix:fiber:$fiberVersion"
}

loom {
    mixin.defaultRefmapName = "paucal.refmap.json"

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("Fabric/run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("Fabric/run")
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir '../Common/src/generated/resources'
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}


remapJar {
    archiveClassifier = "fabric"

    from rootProject.file("LICENSE.txt")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
