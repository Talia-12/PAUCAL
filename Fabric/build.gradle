plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
}
apply plugin: 'com.github.johnrengelman.shadow'

archivesBaseName = getArtifactID("fabric")

// https://github.com/shedaniel/cloth-config/blob/v6/common/build.gradle
configurations {
    shade
    implementation.extendsFrom shade
}

loom {
    mixin.defaultRefmapName = "paucal.mixins.refmap.json"

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("Fabric/run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("Fabric/run")
        }
    }
}

repositories {
    mavenCentral()

    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"
    compileOnly project(":Common")

    modImplementation "me.zeroeightsix:fiber:$fiberVersion"
    include "me.zeroeightsix:fiber:$fiberVersion"

    shade "blue.endless:jankson:$janksonVersion"
    testCompileOnly "blue.endless:jankson:$janksonVersion"

    runtimeOnly "curse.maven:authme-356643:4021907"
    implementation 'org.jetbrains:annotations:16.0.2'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir '../Common/src/generated/resources'
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

setupJar(this)
jar.archiveClassifier = 'slim'

shadowJar {
    archiveClassifier = 'shadow'
    configurations = [project.configurations.shade]
    relocate 'blue.endless.jankson', "at.petrak.relocated.jankson"
}

remapJar {
    dependsOn(shadowJar)
    inputFile.set(shadowJar.archiveFile)
    archiveClassifier = ''

    from rootProject.file("LICENSE.md")
}
