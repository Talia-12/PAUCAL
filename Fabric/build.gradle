plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
}

apply plugin: 'com.github.johnrengelman.shadow'

archivesBaseName = getArtifactID("fabric")

configurations {
    common
    shade
    implementation.extendsFrom shade
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

loom {
    mixin.defaultRefmapName = "paucal.mixins.refmap.json"

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("Fabric/run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("Fabric/run")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"
    compileOnly project(":Common")

    modImplementation "me.zeroeightsix:fiber:$fiberVersion"
    include "me.zeroeightsix:fiber:$fiberVersion"

    implementation(shade('com.electronwill.night-config:toml:3.6.5'))

    testCompileOnly 'com.electronwill.night-config:toml:3.6.5'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir '../Common/src/generated/resources'
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

setupJar(this)
jar.archiveClassifier = 'slim'

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.electronwill.nightconfig', "at.petrak.relocated.nightconfig"
    finalizedBy assemble
}

assemble.dependsOn shadowJar
remapJar.dependsOn shadowJar
